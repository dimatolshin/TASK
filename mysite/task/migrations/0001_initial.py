# Generated by Django 5.0.6 on 2024-07-06 08:18

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.IntegerField(unique=True)),
                ('status', models.CharField(choices=[('Заказачик', 'Customer'), ('Сотрудник', 'Staff')], max_length=15)),
                ('photo', models.ImageField(upload_to='media')),
                ('groups', models.ManyToManyField(blank=True, help_text='Группы, к которым принадлежит этот пользователь. Пользователь получит все разрешения, предоставленные каждой из его групп.', related_name='customuser_groups', related_query_name='customuser', to='auth.group', verbose_name='группы')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='специфические права для этого пользователя.', related_name='customuser_user_permissions', related_query_name='customuser', to='auth.permission', verbose_name='права пользователя')),
            ],
            options={
                'permissions': (('can_create', 'Может создавать задачи'), ('access_all_tasks', 'Доступ ко всем задачам'), ('can_add_customer', 'Может добавлять заказчика'), ('can_add_staff', 'Может добавлять сотрудника'), ('access_all_staff', 'Доступ ко всем сотрудникам')),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=300)),
                ('status', models.CharField(choices=[('Ожидание исолнителя', 'Waiting'), ('В процессе', 'In Progress'), ('Выполнено', 'Completed')], default='Ожидание исолнителя', max_length=30)),
                ('data_start', models.DateField(auto_now_add=True)),
                ('data_update', models.DateField(blank=True, null=True)),
                ('data_finish', models.DateField(blank=True, null=True)),
                ('report', models.TextField(max_length=300)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_customer', to='task.customuser')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_owner', to='task.customuser')),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_staff', to='task.customuser')),
            ],
        ),
    ]
